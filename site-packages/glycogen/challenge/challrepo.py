
import os
import pickle

#TODO figure out what is the best path to use here
#TODO possibly use one file per bundle id, to improve stability and performance
#CHALLENGE_FILE_PATH = '/tmp/glycogen/challenges'
CHALLENGE_FILE_PATH = '/home/sugar/challenges/chal'


# utility method to make sure the directory exists to put the challenges in
def ensure_dir(file_path):
    directory = os.path.dirname(file_path)
    if directory:
        if not os.path.exists(directory):
            os.makedirs(directory)

class ChallengeRepo():

    #self._challenges is a map
    #    -key = bundle id
    #    -value = map of challenges
    
    # map of challenges
    #    -key = challenge id
    #    -value = Challenge type

    def __init__(self):
        # Unpickle list of challenges if present
        ensure_dir(CHALLENGE_FILE_PATH)
        try:
            f = open(CHALLENGE_FILE_PATH, 'r')
            self._challenges = pickle.load(f)
            f.close()
        except IOError:
            # file doesn't exist, use empty map
            self._challenges = {}

    def persist_challenges(self):
        ensure_dir(CHALLENGE_FILE_PATH)
        try:
            f = open(CHALLENGE_FILE_PATH, 'w')  # write mode to replace any old version of the file
            #TODO need to make sure that changes aren't going to be lost with multiple instances
            # overwriting each other. For now just stick to workflows that will prevent this.
            pickle.dump(self._challenges, f)
            f.close()
        except IOError:
            raise IOError('unable to save challenges')


    def set_challenges(self, bundle_id, challenge_map):
        """ Overwrite any existing challenges for this activity with the
        given challenges.

        challenge_map should use a challenge id as key, which can be
        anything as long as it is unique within the activity. Values should
        be properly instantiated Challenge objets.

        """

        #TODO error checking here to make sure arguments are valid
        self._challenges[bundle_id] = challenge_map


    #a couple of test methods to make sure I can persist things during a session
    def add_challenge(self, challenge):
        """ challenge is just a string for now, for testing """
        self._challenges['challenge'] = challenge
        self.persist_challenges()

    def update_achievement(self, achievement):
        """ achievement is just a string for now, for testing """
        self._challenges['achievement'] = achievement
        self.persist_challenges()



class Challenge():
    """Represents a challenge that can be completed in an activity.

    Each challenge is associated with a particular activity by bundle
    id, and has a challenge id that is unique within the activity.

    This class aims to encapsulate everything that is required for
    dealing with challenges, including the current maximum results that
    have been achieved for the challenge by the user, and how this
    result is used to calculate whether the challenge has been achieved.

    A challenge that is used in a pathway may have a target value, which
    is a custom value set for the specific instance of the challenge
    in that pathway alone. If present, this value will be used rather
    than the default target value.

    """
    
    def __init__(self, bundle_id, challenge_id, description, result):
        self._bundle_id = bundle_id
        self._challenge_id = challenge_id
        self._description = description
        self._result = result
    
    #TODO getters and setters for properties


class Result():
    """ Represents the result for a challenge, including target and actual
    results that have been achieved, and the logic for determining whether
    the challenge is complete.
    
    Default target and a success function must be provided.
    
    success_function must take exactly 2 arguments named 'target' and
    'result' (order is not important)
    
    """

    def __init__(self, target, success_function):
        #TODO error checking for valid type (bool/int/float)
        self._result_type = type(target)
        self._default_target = target
        self._success_function = success_function
        self._custom_target = None
        self._result = None

    def set_target(self, target):
        if isinstance(target, self._result_type):
            self._custom_target = target
        else:
            raise Exception("invalid type for target, expected %s but was %s" % (self._result_type, type(target)))

    def set_result(self, result):
        if isinstance(result, self._result_type):
            self._result = result
        else:
            raise Exception("invalid type for result, expected %s but was %s" % (self._result_type, type(target)))
    
    def get_result(self):
        return self._result
    
    def get_target(self):
        """ Returns the most appropriate target result.
        
        If a custom target has been set, this is returned, otherwise
        the default target is returned.
        
        """
        
        if (self._custom_target is not None):
            return self._custom_target
        else:
            return self._default_target
    
    def achieved(self):
        return self._success_function(target=self.get_target(), result=self.get_result())




# This is probably a better alternative to a singleton implementation
# It is certainly a lot clearer and simpler

_repo_instance = None

def get_global_repository():  # named to make it clear that a single global repo is used
    if globals()['_repo_instance'] is None:
        globals()['_repo_instance'] = ChallengeRepo()
    return globals()['_repo_instance']


if __name__ == '__main__':
    r1 = get_global_repository()
    print r1._challenge
    r1.add_challenge("adding challenge")
    print r1._challenge

    r2 = get_global_repository()
    print r2._challenge
