
class ChallengeRepo():
    
    #a couple of test methods to make sure I can persist things during a session
    def add_challenge(self, challenge):
        """ challenge is just a string for now, for testing """
        self._challenge = challenge

    def update_achievement(self, achievement):
        """ achievement is just a string for now, for testing """
        self._achievement = achievement


    def __init__(self):
        self._challenge = "not changed"
        self._achievement = "not changed"



    # Things we need:

    # Map of all the challenges in each activity
    
    # Challenge has: activity_id, challenge_id, description, result type, result reporting method
    # result reporting method may be complicated to access, it should be a module method with no
    # class to have to instantiate, so don't worry about it if it is too complicated, instead
    # just do something with tuples that are either format strings (for numbers) or different
    # messages (for booleans)
    
    # RESULTS
    # Results can be int, float, percentage, boolean
    # Reporting method takes the target and the actual and returns a formatted
    # string indicating success or failure. The method should also return a
    # boolean to indicate complete or not (returns a tuple).

    # could make a challenge result class that is a wrapper for all challenge
    # results of every type, used to store the value and return it, so that
    # they can easily be passed around without any consideration for the type
    # they are, plus the type could be determined without reflection

    # In python it may be better just to reflect it, although that does
    # allow more leeway for things to go wrong.

    # Target results could be stored in the result wrapper too. Developer can
    # then unwrap them in the comparison method, compare, and respond appropriately


    # Map of current achievements (a challenge and a result)
    
    def __init__(self):
        pass


# This is probably a better alternative to a singleton implementation
# It is certainly a lot clearer and simpler

_repo_instance = None

def get_repository():
    if globals()['_repo_instance'] is None:
        globals()['_repo_instance'] = ChallengeRepo()
    return globals()['_repo_instance']
