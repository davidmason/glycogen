
from pathwaynode import StartNode, EndNode, ChallengeNode, ParallelNode
from challenge import Challenge

class LearningPathway():
    """An entire learning pathway as a collection of nodes.
    
    This represents a special type of SerialNode, that provides a
    name and other metadata for the pathway, as well as the usual
    start_node and end_node from which all other nodes in the pathway
    can be accessed using start_node.after() and end_node.before().
    
    """

    def __init__(self):
        # start and finish nodes hooked directly to each other to start
        self.start = StartNode()
        self.finish = EndNode(self.start)
        self.start.after = self.finish
    
    def complete(self):
        return self.finish.complete()

#TODO remove this with test
def print_pathway(pathway):
    first = pathway.start
    last = pathway.finish
    next_node = first.after
    print "start of pathway, ",

    while next_node is not last:
        print_node(next_node)
        next_node = next_node.after
    print "end of pathway"

def print_node(node):
    if type(node) is ParallelNode:
        print_parallel_node(node)
    if type(node) is ChallengeNode:
        print node.challenge.identifier,
    print ", ",

def print_parallel_node(node):
    print "(",
    next_node = node.first.top.after
    last = node.last.top
    while next_node is not last:
        print_node(next_node)
        next_node = next_node.after
    print "/",
    next_node = node.first.bottom.after
    last = node.last.bottom
    while next_node is not last:
        print_node(next_node)
        next_node = next_node.after
    print ")",

if __name__ == "__main__":
    # this test is to try out the learning pathway as I make it

    pathway = LearningPathway()

    # add a challenge node after the start
    first_challenge = Challenge("first")
    first_node = ChallengeNode(challenge=first_challenge)

    pathway.start.add_after(first_node)
    print_pathway(pathway)

    second_challenge = Challenge("second")
    second_node = ChallengeNode(challenge=second_challenge)
    first_node.add_after(second_node)

    print_pathway(pathway)

    # add a challenge node before the end
    last_challenge = Challenge("last")
    last_node = ChallengeNode(challenge=last_challenge)
    pathway.finish.add_before(last_node)

    # check that they ended up where we expect
    print_pathway(pathway)

    # add a node above the second
    above_challenge = Challenge("above")
    above_node = ChallengeNode(challenge=above_challenge)
    second_node.add_above(above_node)

    print_pathway(pathway)

    # add a node below the above node
    below_node = ChallengeNode(challenge=Challenge("below"))
    above_node.add_below(below_node)

    print_pathway(pathway)
