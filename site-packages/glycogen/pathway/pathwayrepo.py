

import pickle
from glycogen.util.fileutil import ensure_dir


#TODO figure out what is the best path to use here
PATHWAY_FILE_PATH = '/home/sugar/pathways/path'

class PathwayRepository():
    """ Responsible for persistence and retrieval of learning pathways.
    
    Currently uses /home/sugar/pathways/path as a storage location """
    
    
    #self._pathways will just be a list for now, as long as it can be
    #               maintained in order. In future, a unique key would
    #               be better so that pathways can be maintained in a
    #               map and reliably accessed.
    
    def __init__(self):
        # Unpickle list of pathways if present
        ensure_dir(PATHWAY_FILE_PATH)
        try:
            f = open(PATHWAY_FILE_PATH, 'r')
            self._pathways = pickle.load(f)
            f.close()
        except IOError:
            # file doesn't exist, use empty list
            self._pathways = []
    
    
    def persist_pathways(self):
        ensure_dir(PATHWAY_FILE_PATH)
        try:
            f = open(PATHWAY_FILE_PATH, 'w')  # write mode to replace any old version of the file
            #TODO need to make sure that changes aren't going to be lost with multiple instances
            # overwriting each other. For now just stick to workflows that will prevent this.
            pickle.dump(self._pathways, f)
            f.close()
        except IOError:
            raise IOError('unable to save pathways')
            
    def get_pathway(self, pathway_id):
        """ pathway_id should be an id given during the current session by a pathway repository """
        return self._pathways[pathway_id]
    
    def delete_pathway(self, pathway_id):
        """ pathway_id should be an id given during the current session by a pathway repository """
        del self._pathways[pathway_id]
        self.persist_pathways()
    
    def add_pathway(self, pathway):
        """ Adds the given pathway to the list of pathways and persists
        the updated list.
        
        pathway should be a LearningPathway object.
        
        returns an id that can be used to retrieve the pathway.
        
        """
        #TODO check that pathway is a LearningPathway
        self._pathways.append(pathway)
        self.persist_pathways()
        return len(self._pathways)-1
    
    
    def set_pathway(self, pathway_id, pathway):
        """ Replaces a pathway with the given id """
        self._pathways[pathway_id] = pathway
        self.persist_pathways()
        
    
    def set_pathways(self, pathway_list):
        """ Overwrite any existing pathways with the given pathways.
        
        pathway_list should be a list of LearningPathway objects

        """

        #TODO error checking here to make sure arguments are valid
        self._pathways = pathway_list
        self.persist_pathways()
        
    def get_pathways(self):
        return self._pathways



_repo_instance = None

def get_global_repository():  # named to make it clear that a single global repo is used
    if globals()['_repo_instance'] is None:
        globals()['_repo_instance'] = PathwayRepository()
    return globals()['_repo_instance']


if __name__ == '__main__':
    r1 = get_global_repository()
    print r1.get_pathways()
    p1 = r1.add_pathway("fake first pathway")
    print r1.get_pathways()

    r2 = get_global_repository()
    p2 = r2.add_pathway("fake second pathway")
    print r2.get_pathways()
    print r1.get_pathway(p1)
    print r2.get_pathway(p1)
    print r1.get_pathway(p2)
    print r2.get_pathway(p2)
    
    r2.set_pathways([])
    
    
