# Copyright (C) 2006-2007 Red Hat, Inc.
# Copyright (C) 2008 One Laptop Per Child
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

import gtk
import gobject

#from glycogen.desktop.activitybox import ActivityBox
from glycogen.desktop.challengelist import ChallengeList
from glycogen.desktop.activitylist import ActivityList
from glycogen.desktop.pathwaylist import PathwayList
from glycogen.desktop.pathwaydisplay import PathwayDisplay

from glycogen.challenge import challrepo
from glycogen.challenge.challrepo import Challenge

class PathwayView(gtk.VBox):
    """ Main window for glycogen, displays activities, challenges,
    list of pathways and selected pathway. Aims to allow editing
    of pathways by inserting challenges from the list.
    
    """

    def __init__(self, **kwargs):
        gtk.VBox.__init__(self, False, 0)

        # self.activity_box = ActivityBox(**kwargs)
        # self.pack_start(self.activity_box, True, True, 0)
        # self.activity_box.show()
        
        self.top = gtk.HBox(False, 0)
        self.pack_start(self.top, True, True, 0)
        self.top.show()
        
        self.bottom = gtk.HBox(False, 0)
        self.pack_start(self.bottom, True, True, 0)
        self.bottom.show()
        
        self.activity_list = ActivityList()
        self.activity_list.connect('cursor-changed', self.activity_selected_cb)
        self.top.pack_start(self.activity_list, True, True, 0)
        self.activity_list.show()
        
        self.challenge_list = ChallengeList()
        self.top.pack_start(self.challenge_list, True, True, 0)
        self.challenge_list.show()
        
        self.pathway_list = PathwayList()
        self.pathway_list.connect('cursor-changed', self.pathway_selected_cb)
        self.bottom.pack_start(self.pathway_list, True, True, 0)
        self.pathway_list.show()
        
        self.pathway_display = PathwayDisplay()
        self.bottom.pack_start(self.pathway_display, True, True, 0)
        self.pathway_display.show()
        
        self.pathway_display.btn_add_before.connect('clicked', self.add_before_cb)
        self.pathway_display.btn_add_after.connect('clicked', self.add_after_cb)
        self.pathway_display.btn_add_sametime.connect('clicked', self.add_sametime_cb)
        
        #TODO debug: remove
        self.debug_label = gtk.Label("debug label")
        self.pack_start(self.debug_label, True, True, 0)
        self.debug_label.show()
        
        self.show()
    
    #TODO remove
    def debug(self, debug_string):
        self.debug_label.set_text(debug_string)
    
    def pathway_selected_cb(self, widget, data=None):
        pathway = self.pathway_list.get_selected_pathway()
        self.pathway_display.set_pathway(pathway)
        self.pathway_display.refresh()
    
    def activity_selected_cb(self, widget, data=None):
        bundle_id = self.activity_list.get_selected_activity_id()
        self.challenge_list.show_challenges(bundle_id)
    
        
    def add_before_cb(self, widget, data=None):
        challenge = self.challenge_list.get_selected_challenge()
        self.pathway_display.add_challenge_before(challenge)
    
    def add_after_cb(self, widget, data=None):
        challenge = self.challenge_list.get_selected_challenge()
        self.pathway_display.add_challenge_after(challenge)
        
    def add_sametime_cb(self, widget, data=None):
        challenge = self.challenge_list.get_selected_challenge()
        self.pathway_display.add_challenge_sametime(challenge)
        
        
        
        
