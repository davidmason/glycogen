
import logging
import gtk
from jarabe.model import bundleregistry
from jarabe.model import shell
from sugar.datastore import datastore

_logger = logging.getLogger('FavoritesView')

logging.debug('GLYCOGEN: loading TestBox')


class TestBox(gtk.VBox):

    def __init__(self):
        gtk.VBox.__init__(self, False, 0)

        # store mathogen prac activity when it is found
        mpa = None

        self.label = gtk.Label("")
        self.pack_start(self.label, True, True, 5)
        self.label.show()

        # retrieve the activity bundle info
        # make a label with the name of each

        registry = bundleregistry.get_registry()
        for info in registry:
            if info.get_bundle_id() == "org.davidmason.mathogen_prac":
                thing = ", ".join([info.get_name(), info.get_bundle_id()])
                self.writeline(thing)
                mpa = info

        if mpa is None:
            self.writeline("activity not found")
        else:
            self.writeline("activity found")
            query = {'activity': mpa.get_bundle_id()}
            properties = ['uid', 'title', 'icon-color', 'activity', 'activity_id', 'mime_type', 'mountpoint']
            datastore.find(query, sorting=['+timestamp'],
                           limit=5,
                           properties=properties,
                           reply_handler=self._query_reply_handler_cb,
                           error_handler=self._query_error_handler_cb)
            self.writeline("sent datastore find command")

        self.show()

    def _query_reply_handler_cb(self, entries, total_count):
        self.writeline("reply handler callback happened")
        self.writeline(str(total_count))
        # pull the activity id
        for entry in entries:
            activity_id = entry.get_metadata.get('activity_id')
        shell_model = shell.get_model()
        activity = shell_model.get_activity_by_id(activity_id)

        self.writeline("got the activity from shell model")
        self.writeline(str(activity))

        message = "no activity"
        if activity is not None:
            message = "found activity, test method output: "
            try:
                message = message + activity.testmethod()
            except AttributeError:
                message = massage + "test method not found"

        self.writeline("message")

    def _query_error_handler_cb(self, error):
        logging.debug('GLYCOGEN: testbox: received error in response to query')



    def writeline(self, line):
        if console:
            print line
        else:
            self.label.set_text(self.label.get_text() + "\n" + line)


console = False



if __name__ == "__main__":
    console = True
    print "this is working"
    mybox = TestBox()



