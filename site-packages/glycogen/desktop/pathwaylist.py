
import gtk
from glycogen.pathway import pathwayrepo
from glycogen.pathway.learningpathway import LearningPathway

class PathwayList(gtk.VBox):
    """ Responsible for retrieving and displaying all available learning
    pathways.
    
    use update() to refresh the list
    
    """

    def __init__(self):
        gtk.VBox.__init__(self, False, 0)
        self._btn_new_pathway = gtk.Button("Add pathway")
        self.pack_start(self._btn_new_pathway, False, False, 0)
        self._btn_new_pathway.show()
        
        self._listmodel = gtk.ListStore(int, str)
        self._treeview = gtk.TreeView(self._listmodel)
        self._column = gtk.TreeViewColumn('Pathway')
        self._treeview.append_column(self._column)
        self._cell = gtk.CellRendererText()
        self._column.pack_start(self._cell, True)
        self._column.add_attribute(self._cell, 'text', 1)
        
        self.pack_start(self._treeview, True, True, 0)
        self._treeview.show()
        
        self.update()
        self.show()
        
    def update(self):
        self._listmodel.clear()
        index = 0
        for pathway in self._get_pathways():
            self._listmodel.append([index, pathway.get_name()])
            index += 1
    
    def _get_pathways(self):
        repository = pathwayrepo.get_global_repository()
        return repository.get_pathways()
    
    def get_selection(self):
        return self._treeview.get_selection()
    
    
    def set_selected(self, pathway_id):
        self._listmodel.foreach(self._try_select_pathway, pathway_id)
    
    def _try_select_pathway(self, model, path, iter, user_data):
        target_id = user_data
        pathway_id = model.get_value(iter, 0)
        if pathway_id is target_id:
            self._treeview.set_cursor(path)
    
    def get_selected_pathway(self):
        selection = self.get_selection()
        tree_model, tree_iter = selection.get_selected()
        if tree_iter is None:
            return None
        pathway_index = tree_model.get_value(tree_iter, 0)
        pathway = self._get_pathways()[pathway_index]
        return (pathway_index, pathway)
        

    
