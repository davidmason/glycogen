
import gtk
from glycogen.pathway.learningpathway import LearningPathway
from glycogen.pathway.pathwaynode import ChallengeNode, ParallelNode, StartNode, EndNode

class PathwayDisplay(gtk.VBox):
    """ Displays a single learning pathway as a pygtk widget """
    
    def __init__(self):
        gtk.VBox.__init__(self, False, 0)
        
        self._topbox = gtk.HBox(False, 0)
        self.pack_start(self._topbox, False, False, 0)
        self._topbox.show()
        
        self._namebox = gtk.Label("pathway name")  #TODO replace with text entry
        self._topbox.pack_start(self._namebox, False, False, 0)
        self._namebox.show()
        
        self.btn_add_before = gtk.Button("before")
        self._topbox.pack_start(self.btn_add_before, False, False, 0)
        self.btn_add_before.show()
        
        self.btn_add_after = gtk.Button("after")
        self._topbox.pack_start(self.btn_add_after, False, False, 0)
        self.btn_add_after.show()
        
        self.btn_add_sametime = gtk.Button("same time")
        self._topbox.pack_start(self.btn_add_sametime, False, False, 0)
        self.btn_add_sametime.show()
        
        
        
        self._pathwaybox = gtk.HBox(False, 0)
        self.pack_start(self._pathwaybox, True, True, 0)
        self._pathwaybox.show()
        
        self._challenge_details = gtk.Label("challenge details")
        self.pack_start(self._challenge_details, True, True, 0)
        self._challenge_details.show()
        
        #self.set_cursor(None)
        
        #FIXME this is a test pathway, remove after testing
        self.set_pathway(LearningPathway())
        self.refresh()
        
        self.show()
    
    def set_pathway(self, pathway):
        self._pathway = pathway
        if pathway is None:
            self.set_cursor(None)
        else:
            self.set_cursor(pathway.start)
    
    def get_pathway(self):
        return self._pathway
    
    def set_cursor(self, node):
        self._cursor = node
        
        self.btn_add_before.set_sensitive(False)
        self.btn_add_after.set_sensitive(False)
        self.btn_add_sametime.set_sensitive(False)
        
        if type(node) is StartNode:
            self.btn_add_after.set_sensitive(True)
        if type(node) is EndNode:
            self.btn_add_before.set_sensitive(True)
        if type(node) is ChallengeNode:
            self.btn_add_before.set_sensitive(True)
            self.btn_add_after.set_sensitive(True)
            self.btn_add_sametime.set_sensitive(True)
    
    
    def add_challenge_before(self, challenge):
        pathway = self.get_pathway()
        if pathway is None:
            raise Exception("cannot add challenge with no pathway")
        chal_node = self._build_challenge_pathway_node(challenge)
        self._cursor.add_before(chal_node)
        #TODO set cursor to chal_node?
        self.refresh()
    
    def add_challenge_after(self, challenge):
        pathway = self.get_pathway()
        if pathway is None:
            raise Exception("cannot add challenge with no pathway")
        chal_node = self._build_challenge_pathway_node(challenge)
        self._cursor.add_after(chal_node)
        self.refresh()
        
    def add_challenge_sametime(self, challenge):
        pathway = self.get_pathway()
        if pathway is None:
            raise Exception("cannot add challenge with no pathway")
        chal_node = self._build_challenge_pathway_node(challenge)
        self._cursor.add_below(chal_node)
        self.refresh()
    
    def _build_challenge_pathway_node(self, challenge):
        """ Adds the given challenge at the current cursor location
        in the pathway being displayed. This will not automatically
        persist the change """
        
        if challenge is None:
            raise Exception("challenge is None")
        chal_node = ChallengeNode(None, None, challenge)
        return chal_node
    
    
    #TODO method to display pathway by id - retrieve pathway from repository
    
    def refresh(self):
        """ Refreshes display of this PathwayDisplay's LearningPathway """
        
        #TODO set cursor to something valid if it isn't
        #TODO show cursor
        
        for child in self._pathwaybox.get_children():
            self._pathwaybox.remove(child)
            
        if self._pathway is None:
            self._namebox.set_text("no pathway")
            self._challenge_details.set_text("")
            return
        
        self._namebox.set_text(self._pathway.get_name())
        self._pathwaybox.pack_start(self._build_terminal_node(self.get_pathway().start, "start"), False, False, 0)
        self._pathwaybox.pack_end(self._build_terminal_node(self.get_pathway().finish, "end"), False, False, 0)
        self._add_nodes_between(self._pathwaybox, self.get_pathway().start, self.get_pathway().finish)
        
        
    def _build_terminal_node(self, node, label):
        terminal_node = gtk.Button(label)
        terminal_node.pathway_node = node
        terminal_node.connect('clicked', self._click_terminal_node_cb)
        terminal_node.show()
        return terminal_node
        
    
    def _add_nodes_between(self, box, start, end):
        """ Recursively add gtk widget representations of nodes between start and end
        (non inclusive) to the given gtk.Box """
        
        next = start.after
        
        while next is not end:
            box.pack_start(self._build_node(next), False, False, 0)
            next = next.after
    
    
    def _build_node(self, node):
        if type(node) is ParallelNode:
            return self._build_parallel_node(node)
        if type(node) is ChallengeNode:
            return self._build_challenge_node(node)
        raise Exception("Attempted to build unexpected node type")
        
    def _build_parallel_node(self, node):
        #make self as VBox
        node_box = gtk.VBox(False, 0)
        top_box = gtk.HBox(False, 0)
        bottom_box = gtk.HBox(False, 0)
        node_box.pack_start(top_box, True, True, 0)
        node_box.pack_start(bottom_box, True, True, 0)
        
        self._add_nodes_between(top_box, node.first.top, node.last.top)
        self._add_nodes_between(bottom_box, node.first.bottom, node.last.bottom)
        
        top_box.show()
        bottom_box.show()
        node_box.show()
        
        return node_box
    
    def _build_challenge_node(self, node):
        #TODO make this have a tool-tip
        #TODO different icon depending whether the challenge is complete
        
        #TODO initially just use simple text (truncate description)?
        
        label = "?"
        
        if node is self._cursor:
            label = "!"  #TODO set background colour instead
        
        chal = gtk.Button(label)
        chal.pathway_node = node
        
        if node is self._cursor:
            chal.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse("red"))
        
        chal.show()
        
        #hook up the clicked signal for this button to an appropriate callback function
        chal.connect('clicked', self._click_challenge_cb)
        
        return chal
        
        #if node.challenge.complete():
        #    return gtk.Label("complete")
        #else:
        #    return gtk.Label("incomplete")
    
    def _click_terminal_node_cb(self, widget, data=None):
        self.set_cursor(widget.pathway_node)
        self.refresh()
    
    def _click_challenge_cb(self, widget, data=None):
        self.set_cursor(widget.pathway_node)
        self._challenge_details.set_text(widget.pathway_node.challenge.get_description())
        self.refresh()
    
    
    
    
    
